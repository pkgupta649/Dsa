#include <iostream>
#define MAX_SIZE 100 // Maximum size of the stack

using namespace std;

class Stack {
private:
    int top;
    int arr[MAX_SIZE];

public:
    Stack() {
        top = -1; // Initialize top to -1 to indicate an empty stack
    }

    bool isEmpty() {
        return top == -1;
    }

    bool isFull() {
        return top == MAX_SIZE - 1;
    }

    void push(int val) {
        if (isFull()) {
            cout << "Stack Overflow: Cannot push element " << val << ". Stack is full." << endl;
            return;
        }
        arr[++top] = val;
        cout << val << " pushed into the stack." << endl;
    }

    int pop() {
        if (isEmpty()) {
            cout << "Stack Underflow: Cannot pop element. Stack is empty." << endl;
            return -1; // Return -1 indicating stack underflow
        }
        return arr[top--];
    }

    int peek() {
        if (isEmpty()) {
            cout << "Stack is empty." << endl;
            return -1; // Return -1 indicating empty stack
        }
        return arr[top];
    }
};

int main() {
    Stack stack;
    stack.push(5);
    stack.push(10);
    stack.push(15);
    
    cout << "Top element: " << stack.peek() << endl;

    cout << stack.pop() << " popped from the stack." << endl;
    cout << stack.pop() << " popped from the stack." << endl;

    cout << "Top element: " << stack.peek() << endl;

    return 0;
}
